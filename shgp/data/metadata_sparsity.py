from dataclasses import dataclass

import numpy as np

from shgp.data.dataset import BananaDataset, BreastCancerDataset, CrabsDataset, FertilityDataset, HeartDataset, \
    IonosphereDataset, MagicDataset, PimaDataset


@dataclass
class SparsityMetaDataset:
    """
        A dataset utilities class specifically for sparsity experiments.
        The training hyperparameters typically need to be smaller for sparsity
        experiments. For example, we use a smaller number of optimisation iterations
        otherwise the experiments are computationally infeasible.

        :param num_cycles: The number of times to train a model and average results over.
        :param inner_iters: The number of iterations of the inner optimisation loop.
        :param opt_iters: The number of iterations of gradient-based optimisation of the kernel hyperparameters.
        :param ci_iters: The number of iterations of update for the local variational parameters.
        :param M_array: An array containing the number of inducing points to test.
    """
    num_cycles: int
    inner_iters: int
    opt_iters: int
    ci_iters: int
    M_array: np.ndarray


""" Banana with Exp kernel - np.arange(5, 51, 5):
    Results without shuffling the training set, and without standardising features (old).
results_gv = [-265.49513108 -195.44167004 -145.87563741 -131.90480825 -125.9670635
 -122.73358912 -121.30270616 -120.68870247 -120.43619712 -120.35173555]
results_hgv = [-266.29317535 -204.79355749 -145.56674102 -132.28223269 -126.11717347
 -123.08139882 -121.23531664 -120.75147426 -120.43485241 -120.35837124]
optimal = -120.29951799625849
"""

""" Banana with Exp kernel - np.arange(5, 51, 5):
    Results *with* shuffling the training set, and standardising features (new).
results_gv = [-263.96390801 -193.47278328 -146.06442775 -131.69559018 -125.21248857
 -122.07170094 -120.68262996 -120.08218722 -119.87603769 -119.79144935]
results_hgv = [-265.21812865 -218.44034193 -146.41359466 -133.27414978 -124.94452836
 -122.51418155 -120.67969943 -120.04857661 -119.9010278  -119.80383267]
optimal = -119.74156303725914
"""


class BananaSparsityMetaDataset(BananaDataset, SparsityMetaDataset):
    def __init__(self):
        BananaDataset.__init__(self)
        SparsityMetaDataset.__init__(self, 5, 10, 250, 10, np.arange(5, 51, 5))


""" Fertility with Exp kernel - np.arange(1, 31):
results_gv = [-42.35065142 -39.35464259 -39.35464426 -39.35464209 -39.35464269
 -42.35065107 -39.3546428  -39.35464179 -39.35464195 -39.35464215
 -39.35464229 -39.35464224 -39.35464236 -39.35464212 -39.35464417
 -39.35464205 -39.35464209 -39.35464192 -39.35464212 -39.35464186
 -39.35464263 -39.35464141 -39.35464136 -39.35464229 -39.35464584
 -39.35464628 -39.35464198 -39.3546423  -39.35464183 -39.3546425 ]
results_hgv = [-45.34665907 -42.35065092 -42.35065219 -42.35064986 -39.35464339
 -42.35065014 -39.35464253 -39.35464164 -39.35464411 -39.35464301
 -39.35464248 -39.3546429  -39.35464322 -39.35464222 -39.35464381
 -39.35464179 -39.35464291 -39.35464257 -39.35464213 -39.35464161
 -39.35464247 -39.3546422  -39.35464183 -39.35464139 -39.35464259
 -39.3546423  -39.35464138 -39.35464166 -39.35464215 -39.35464218]
optimal = -39.35464385423624
"""


class FertilitySparsityMetaDataset(FertilityDataset, SparsityMetaDataset):
    def __init__(self):
        FertilityDataset.__init__(self)
        SparsityMetaDataset.__init__(self, 10, 10, 250, 10, np.arange(1, 31))


""" Heart with Exp kernel - np.arange(5, 20)
results_gv = [-37.91640816 -32.60721861 -31.05576051 -30.27227717 -30.19792298
 -30.13459039 -30.1305231  -30.12853005 -30.12531174 -30.12233256
 -30.12177307 -30.12097562 -30.12067711 -30.12046462 -30.12032768]
results_hgv = [-104.86139969  -33.03065924  -30.70188141  -30.25910392  -30.19302965
  -30.16403354  -30.13561442  -30.13122338  -30.12628443  -30.12465757
  -30.12163537  -30.12094033  -30.12056066  -30.12043871  -30.12021581]
optimal = -30.176947285032895
"""


class CrabsSparsityMetaDataset(CrabsDataset, SparsityMetaDataset):
    def __init__(self):
        CrabsDataset.__init__(self)
        SparsityMetaDataset.__init__(self, 10, 10, 250, 10, np.arange(5, 20))


""" Heart with Exp kernel - np.arange(5, 36)
results_gv = [-149.89383002 -152.00710325 -143.62037379 -130.17692237 -132.55702415
 -124.84901607 -122.26416493 -127.3711103  -118.9368316  -117.46242384
 -117.39032259 -117.31566198 -117.25612216 -117.22138389 -117.18431512
 -124.13964485 -117.12037684 -117.08700376 -117.05800921 -117.02467553
 -117.00864017 -116.98405797 -116.95961806 -116.93282486 -116.91689965
 -116.90863542 -116.88328531 -116.86232315 -116.84860093 -116.8271588
 -116.82212092]
results_hgv = [-148.76503507 -142.36200692 -132.6211421  -143.9070711  -130.04724815
 -132.49269419 -136.40839469 -122.25113204 -119.84868769 -117.61866759
 -117.55443058 -117.38374159 -117.35889061 -117.28851663 -117.25051371
 -117.23099963 -124.17515359 -117.1190942  -124.08173384 -117.05083756
 -117.01637656 -117.00397749 -116.93492216 -123.95107217 -116.91613874
 -116.87625325 -116.86585064 -116.847066   -116.8249032  -116.80518564
 -116.79155455]
optimal = -116.39046838357692
"""


class HeartSparsityMetaDataset(HeartDataset, SparsityMetaDataset):
    def __init__(self):
        HeartDataset.__init__(self)
        SparsityMetaDataset.__init__(self, 10, 10, 250, 10, np.arange(5, 36))


""" Ionosphere with Exp kernel - np.arange(5, 101, 5):
results_gv = [-196.65469498 -175.97484797 -165.9095813  -151.71188434 -145.7723689
 -137.99585018 -131.53087214 -131.33485169 -131.16074613 -130.97737169
 -130.83737541 -130.68515049 -130.56488604 -130.39868595 -130.27334016
 -130.21817046 -130.0857033  -129.94984779 -129.75846762 -129.60681498]
results_hgv = [-203.80311205 -180.12051104 -167.71280856 -154.60128442 -147.11327949
 -136.90363315 -131.61687268 -131.34020331 -131.13195079 -130.96671821
 -130.82673061 -130.7042614  -130.54060093 -130.42575658 -130.28609701
 -130.23969488 -130.15821464 -130.04294839 -129.95596404 -129.83239931]
optimal = -127.00552361477861
"""


class IonosphereSparsityMetaDataset(IonosphereDataset, SparsityMetaDataset):
    def __init__(self):
        IonosphereDataset.__init__(self)
        SparsityMetaDataset.__init__(self, 10, 10, 250, 10, np.arange(5, 101, 5))


""" Breast Cancer with Exp kernel - np.arange(5, 101, 5):
results_gv = [-130.22956909  -98.45589806  -86.72260874  -80.46782369  -76.716973
  -75.55670327  -75.31185702  -75.10336947  -74.97549006  -74.90682751
  -74.84245045  -74.80137592  -74.76943013  -74.75166719  -74.72767932
  -74.7136058   -74.70275634  -74.69287453  -74.6853426   -74.67759243]
results_hgv = [-139.56282149  -99.58917371  -86.86939456  -80.67553816  -76.16629887
  -75.40867314  -75.11433029  -74.95148554  -74.87154145  -74.79757262
  -74.7759053   -74.74274939  -74.73493773  -74.71050661  -74.69445391
  -74.68535592  -74.6780934   -74.67292411  -74.66851262  -74.66450918]
optimal = -75.029016277001
"""

""" New (Colab) - Breast Cancer with Exp kernel - np.arange(5, 101, 5):
results_uniform = [-143.29751761 -100.16207851  -87.94939344  -80.76551685  -77.80310778
  -76.19368973  -75.59881276  -75.44682893  -75.35277861  -75.23948104
  -75.21717796  -75.21656606  -75.1417328   -75.11478398  -75.13099418
  -75.1117179   -75.10418052  -75.08718824  -75.08370164  -75.0643957 ]
results_k_means = [-115.65709975  -90.10761774  -83.64096084  -80.2528042   -77.18323436
  -75.96563409  -75.59557702  -75.32452344  -75.19829685  -75.12990161
  -75.08124084  -75.07916469  -75.05162263  -75.0424329   -75.03501528
  -75.03824124  -75.03082868  -75.02377655  -75.02299504  -75.0240564 ]
optimal = -75.02901627675408
"""


class BreastCancerSparsityMetaDataset(BreastCancerDataset, SparsityMetaDataset):
    def __init__(self):
        BreastCancerDataset.__init__(self)
        SparsityMetaDataset.__init__(self, 5, 10, 100, 10, np.arange(5, 101, 5))


""" Pima Diabetes Cancer with Exp kernel - np.arange(5, 101, 5):
results_gv = results_gv = [-423.64588235 -386.59501815 -386.17788556 -385.68507796 -384.89533349
 -383.84076949 -382.54249711 -381.6088387  -381.27863342 -380.61205978
 -380.16222904 -379.75945861 -379.48135565 -379.35240091 -378.95491056
 -378.80356969 -378.65048198 -378.5303823  -378.40855262 -378.3538156 ]
results_hgv = [-420.21889021 -386.66910472 -386.27469259 -385.7520532  -385.11243869
 -383.90052552 -382.9113214  -382.01660468 -381.17262278 -380.69372039
 -380.22351617 -379.7882304  -379.40044747 -379.2088569  -379.02888323
 -378.88890559 -378.65256517 -378.48233193 -378.40623597 -378.34645726]
optimal = -377.60474770202654
"""


class PimaSparsityMetaDataset(PimaDataset, SparsityMetaDataset):
    def __init__(self):
        PimaDataset.__init__(self)
        SparsityMetaDataset.__init__(self, 5, 10, 100, 10, np.arange(5, 101, 5))


""" MAGIC with Sigmoid kernel - np.arange(5, 306, 10):
results_gv = [-2609.01627019, -2201.40247108, -2109.2050934,  -2013.48576156,
              -1901.21945807, -1854.57465388, -1825.84648597, -1812.65802267,
              -1797.36711529, -1786.26852406, -1778.03356322, -1773.46910692,
              -1766.3075105,  -1761.9136597,  -1757.24984294, -1753.25090633,
              -1748.17801301, -1746.31409115, -1743.27589385, -1741.22624362,
              -1738.10009734, -1736.18195694, -1733.6701451,  -1731.57258114,
              -1729.72409474, -1727.88304081, -1726.35915071, -1724.42671345,
              -1723.71076765, -1721.85358176, -1720.22779382]
results_hgv = [-2551.32677851, -2200.63281494, -2038.35653607, -1932.38857638,
               -1873.80833915, -1833.6790594,  -1805.48248071, -1788.88192242,
               -1779.27184977, -1770.83345528, -1764.07466289, -1756.49798976,
               -1752.3457539,  -1749.01948999, -1745.69713547, -1742.08328673,
               -1740.06159459, -1736.85540609, -1733.98299389, -1730.60367442,
               -1728.2396689,  -1726.68616977, -1725.01996404, -1723.29015993,
               -1721.98628245, -1720.66932513, -1719.0206125,  -1718.0954,
               -1716.75620072, -1715.80900772, -1714.86194047]
optimal = -1705.2172688375176
"""

"""  MAGIC with Exp kernel - np.arange(5, 306, 10):
results_gv = [-2561.31334758 -2165.37069417 -2134.67602761 -1992.87756039
 -1885.44702783 -1794.06725993 -1769.79365389 -1763.24322235
 -1758.49365415 -1755.42048816 -1753.1743076  -1750.86115964
 -1748.19611735 -1746.44331787 -1744.32813507 -1741.95022722
 -1739.80930487 -1737.55566551 -1735.44098962 -1733.64412236
 -1731.47234623 -1730.00651265 -1727.85975375 -1726.76136829
 -1725.00488299 -1723.30045485 -1721.12463406 -1720.04372473
 -1719.30756427 -1718.2254801  -1717.054943  ]
results_hgv = [-2734.057357   -2165.30727176 -2054.25396881 -1950.02161732
 -1844.38156099 -1783.39589196 -1761.67624335 -1756.59869345
 -1753.99358497 -1750.23157204 -1749.04992228 -1746.05259104
 -1743.84685888 -1741.1791646  -1737.91263266 -1735.98522248
 -1732.95190218 -1730.46783778 -1728.70211972 -1726.65195255
 -1724.42077484 -1722.63382612 -1721.72428039 -1720.06013066
 -1717.60317692 -1716.19707043 -1715.13982877 -1714.1739867
 -1712.47813301 -1711.82166615 -1711.07908877]
optimal = -1702.8659218791713
"""

""" New (Colab) - MAGIC with Exp kernel - np.arange(5, 306, 10):
results_uniform = [-2582.99173976 -2104.80811312 -1958.83503055 -1881.14354052
 -1854.33932865 -1840.50499331 -1821.01402584 -1808.7078278
 -1799.20339048 -1788.37600696 -1784.02246444 -1785.58873987
 -1775.91781631 -1766.60142097 -1769.52043129 -1770.07095783
 -1765.34210231 -1761.62787456 -1757.23640484 -1753.30464709
 -1754.24995716 -1755.63574753 -1751.34110749 -1747.01796176
 -1746.89917371 -1746.50369033 -1744.82567686 -1744.84720835
 -1740.74121855 -1741.57467377 -1741.08639596]
results_kmeans = [-2313.16800662 -2041.80009975 -1918.94840119 -1875.28742534
 -1827.87728808 -1798.85417887 -1779.77868459 -1771.28671117
 -1762.8463923  -1757.30426553 -1755.01539015 -1749.82217907
 -1746.25761289 -1743.13321865 -1741.20122444 -1736.80472491
 -1735.91522426 -1733.84242707 -1732.03534237 -1730.60244738
 -1730.01434255 -1727.79461215 -1725.82638431 -1726.02914834
 -1724.21537818 -1722.29997238 -1723.99172757 -1722.36707742
 -1722.03890138 -1721.87861348 -1720.53102835]
optimal = -1702.8659218764612
"""

""" New2 (Colab) - MAGIC with Exp kernel - np.arange(5, 306, 10):
results_hgv = [-2622.88920078 -2165.29989543 -2030.89551171 -1935.82762473
 -1845.58860804 -1778.75346152 -1761.10452395 -1756.82255539
 -1753.64038911 -1751.31769235 -1748.77866817 -1745.81058575
 -1743.88910324 -1741.05621014 -1737.86539163 -1736.05263271
 -1732.48842931 -1730.87240599 -1728.49708456 -1726.61598566
 -1724.54669587 -1722.89507483 -1721.96259604 -1719.88484892
 -1718.15797201 -1716.33362112 -1715.11453179 -1714.16480832
 -1712.64782855 -1711.71690642 -1711.33342417]
results_hgv_then_optimise = [-2012.34005544 -1870.35952549 -1814.63618322 -1781.81814063
 -1759.79239295 -1744.64846209 -1735.52586658 -1729.87674608
 -1725.10174498 -1721.70709836 -1718.36769472 -1715.75304107
 -1713.44155478 -1711.49321582 -1709.97927022 -1708.11360013
 -1707.04489305 -1705.98416789 -1705.01974408 -1704.47648932
 -1703.74840548 -1703.19588689 -1702.76273437 -1702.36497604
 -1701.93507812 -1701.61450529 -1701.30799658 -1701.01032498
 -1700.7762311  -1700.50261561 -1700.36405207]
optimal = -1702.8659218764612
"""


class MagicSparsityMetaDataset(MagicDataset, SparsityMetaDataset):
    def __init__(self):
        MagicDataset.__init__(self)
        SparsityMetaDataset.__init__(self, 3, 5, 50, 10, np.arange(5, 306, 10))

    # Prune the dataset - a full sparsity experiment is computationally infeasible.
    # This is 4755/19020 datapoints of the total dataset.
    def load_data(self):
        X, Y = super().load_data()
        N = len(X)
        random_subset = np.random.choice(N, N // 4)
        return X[random_subset], Y[random_subset]
